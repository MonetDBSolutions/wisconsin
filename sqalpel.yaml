# the Sqalpel minimal environment to bootstrap a project
  projectname : Wisconsin
  projecttitle : 'The seminal database benchmark'
  documentation : doc/DOCUMENTATION.md
 # experiments : <path to experiments>.yaml
  experiments:
    - name : Query01
      remark : (no index) & Query 3 (clustered index) - 1% selection
      after: DROP TABLE tmp
      source : CREATE TEMPORARY TABLE tmp AS
                 SELECT * FROM TENKTUP1
                 WHERE unique2 BETWEEN 0 AND 99

    - name : Query02
      remark : (no index) & Query 4 (clustered index) - 10% selection
      source : CREATE TEMPORARY TABLE tmp AS
                 SELECT * FROM TENKTUP1
                 WHERE unique2 BETWEEN 792 AND 1791;
      after : DROP TABLE tmp

    - name : Query05
      remark : 1% selection via a non-clustered index
      source : CREATE TEMPORARY TABLE tmp AS
                 SELECT * FROM TENKTUP1
                 WHERE unique1 BETWEEN 0 AND 99;
      after : DROP TABLE tmp;

    - name : Query06
      remark : 10% selection via a non-clustered index
      source : CREATE TEMPORARY TABLE tmp AS
                 SELECT * FROM TENKTUP1
                 WHERE unique1 BETWEEN 792 AND 1791;
      after : DROP TABLE tmp

    - name : Query07
      remark : single tuple selection via clustered index to screen
      source : SELECT * FROM TENKTUP1
               WHERE unique2 = 2001

    - name : Query08
      remark : 1% selection via clustered index to screen
      source : SELECT * FROM TENKTUP1
               WHERE unique2 BETWEEN 0 AND 99

    - name : Query09
      remark : (no index) and Query 12 (clustered index) - JoinAselB
      source : CREATE TEMPORARY TABLE tmp AS
                 SELECT A.*, B.* FROM TENKTUP1 AS A , TENKTUP2 AS B
                 WHERE (A.unique2 = B.unique2)
                 AND (B.unique2 < 1000);
      after : DROP TABLE tmp;

    - name : Query10
      remark : (no index) and Query 13 (clustered index) - JoinABprime
      source : CREATE TEMPORARY TABLE tmp AS
                  SELECT * FROM TENKTUP1, BPRIME
                  WHERE (TENKTUP1.unique2 = BPRIME.unique2);
      before : CREATE TABLE BPRIME LIKE( ONEKTUP) AS
                  SELECT * FROM TENKTUP2
                  WHERE TENKTUP2.unique2 < 1000;
      after: DROP TABLE tmp;

    - name : Query11
      remark : (no index) and Query 14 (clustered index) - JoinCselAselB
      source : CREATE TEMPORARY TABLE tmp AS
                 SELECT * FROM ONEKTUP, TENKTUP1
                 WHERE (ONEKTUP.unique2 = TENKTUP1.unique2)
                   AND (TENKTUP1.unique2 = TENKTUP2.unique2)
                   AND (TENKTUP1.unique2 < 1000);
      after : DROP TABLE tmp;

    - name : Query15
      remark : (non-clustered index) - JoinAselB
      source : CREATE TEMPORARY TABLE tmp AS
                 SELECT A.* FROM TENKTUP1 AS A, TENKTUP2 AS B
                 WHERE (A.unique1 = B.unique1)
                   AND (A.unique2 < 1000);
      after : DROP TABLE tmp;

    - name : Query16
      remark : (non-clustered index) - JoinABprime
      source : CREATE TABLE BPRIME LIKE( ONEKTUP) AS
                 SELECT * FROM TENKTUP2
                 WHERE TENKTUP2.unique2 < 1000;
      before : CREATE TEMPORARY TABLE tmp AS
                 SELECT * FROM TENKTUP1, BPRIME
                 WHERE (TENKTUP1.unique1 = BPRIME.unique1);
      after : DROP TABLE tmp;

    - name : Query17
      remark : (non-clustered index) - JoinCselAselB
      source : CREATE TEMPORARY TABLE tmp AS
                 SELECT ONEKTUP.* FROM ONEKTUP, TENKTUP1
                 WHERE (ONEKTUP.unique1 = TENKTUP1.unique1)
                   AND (TENKTUP1.unique1 = TENKTUP2.unique1)
                   AND (TENKTUP1.unique1 < 1000);
      after : DROP TABLE tmp;

    - name : Query18
      remark : Projection with 1% Projection
      source : CREATE TEMPORARY TABLE tmp AS
               SELECT DISTINCT two, four, ten, twenty, hundred, string4
               FROM TENKTUP1;
      after : DROP TABLE tmp;

    - name : Query19
      remark : Projection with 100% Projection
      source : CREATE TEMPORARY TABLE tmp AS
               SELECT DISTINCT two, four, ten, twenty, hundred, unique3,
               evenHundred, oddHundred, stringu1, stringu2, string4
               FROM TENKTUP1;
      after : DROP TABLE tmp;

    - name : Query20
      remark : (no index) and Query 23 (with clustered index) Minimum Aggregate Function
      source : ICREATE TEMPORARY TABLE tmp AS
               SELECT MIN (TENKTUP1.unique2) FROM TENKTUP1;
      after : DROP TABLE tmp;

    - name : Query21
      remark : (no index) and Query 24 (with clustered index) Minimum Aggregate Function with 100 Partitions
      source : CREATE TEMPORARY TABLE tmp AS
               SELECT MIN (TENKTUP1.unique3) FROM TENKTUP1
               GROUP BY TENKTUP1.hundred;
      after : DROP TABLE tmp;

    - name : Query22
      remark : (no index) and Query 25 (with clustered index) Sun Aggregate Function with 100 Partitions
      source : CREATE TEMPORARY TABLE tmp AS
               SELECT SUM (TENKTUP1.unique3) FROM TENKTUP1
               GROUP BY TENKTUP1.hundred;
      after : DROP TABLE tmp;

    - name : Query26
      remark : (no indices) and Query 29 (with indices) - Insert 1 tuple
      source : INSERT INTO TENKTUP1 VALUES(10001,74,0, 2,0,10,50,688,
               1950,4950,9950,1,100,
               'MxxxxxxxxxxxxxxxxxxxxxxxxxGxxxxxxxxxxxxxxxxxxxxxxxxC',
               'GxxxxxxxxxxxxxxxxxxxxxxxxxCxxxxxxxxxxxxxxxxxxxxxxxxA',
               'OxxxxxxxxxxxxxxxxxxxxxxxxxOxxxxxxxxxxxxxxxxxxxxxxxxO')

    - name : Query27
      remark : (no index) and Query 30 (with indices) - Delete 1 tuple
      source : DELETE FROM TENKTUP1 WHERE unique1=10001

    - name : Query28
      remark : (no indices) and Query 31 (with indices) - Update key attribute
      source : UPDATE TENKTUP1
               SET unique2 = 10001 WHERE unique2 = 1491

    - name : Query32
      remark : (with indices) - Update indexed non-key attribute
      source : UPDATE TENKTUP1
               SET unique1 = 10001 WHERE unique1 = 1491
# The variables used within the queries can be separately defined
  variables :
     - name : selectivity
     - series : 0, 1, 5, 10, 25, 100
# The minimal database properties section
  databases :
     - name : wisconsin
       remark : "The minimal setup"
     - name : wisconsin_large
       remark : "The 1993 version"